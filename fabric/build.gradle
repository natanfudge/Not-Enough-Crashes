import com.modrinth.minotaur.TaskModrinthUpload

plugins {
    id "com.github.johnrengelman.shadow" version "5.2.0"
}

configurations {
    shadowCommon
}

architectury {
    platformSetupLoomIde()
    fabric()
}

repositories {
    maven {
        name = "Quilt"
        url = "https://maven.quiltmc.org/repository/release/"
    }
}

dependencies {
//    minecraft("com.mojang:minecraft:${rootProject.minecraft_version}")
    mappings("net.fabricmc:yarn:${rootProject.yarn_mappings}:v2")
    modImplementation("net.fabricmc:fabric-loader:${rootProject.loader_version}")
    compileOnly("org.quiltmc:quilt-loader:0.13.2")

//    modImplementation("net.fabricmc.fabric-api:fabric-api:${rootProject.fabric_version}")
    // Remove the next line if you don't want to depend on the API
//    modCompile("me.shedaniel:architectury:${rootProject.architectury_version}:fabric")

    implementation(project(path: ":common")) {
        transitive = false
    }
    developmentFabric(project(path: ":common")) {
        transitive = false
    }
    shadowCommon(project(path: ":common", configuration: "transformProductionFabric")) {
        transitive = false
    }
}


processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }

    filesMatching("quilt.mod.json") {
        expand "version": project.version
    }
}

shadowJar {
    configurations = [project.configurations.shadowCommon]
    classifier "dev-shadow"
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    classifier "fabric"
}

// Asset files will otherwise be missing when debugging
task copyAssetFilesForDebugging(type: Copy){
    def inAssets = rootProject.file("common/src/main/resources/assets/notenoughcrashes")
    def outAssets = new File("${project.buildDir}/resources/main/assets/notenoughcrashes")
//    inputs.dir(inAssets)
//    outputs.dir(outAssets)
    from inAssets
    into outAssets
    dependsOn processResources
}

assemble.dependsOn(copyAssetFilesForDebugging)


curseforge {
    apiKey = project.hasProperty("curseforge_api_key") ? project.curseforge_api_key : ""
    project {
        id = curseforge_id
        releaseType = 'release'
        addGameVersion "Fabric"
        addGameVersion curseforge_mc_version
        changelogType = "markdown"
        changelog = rootProject.file("changelog.md")

        mainArtifact(remapJar) {
            displayName = "$mod_name $total_version Fabric"
        }
    }

    options {
        forgeGradleIntegration = false
    }
}

task publishModrinth (type: TaskModrinthUpload){
    group = "upload"
    token =  project.hasProperty("modrinth_api_key") ? project.modrinth_api_key : ""
    projectId = 'yM94ont6'
    versionNumber = total_version // Will fail if Modrinth has this version already
    versionName = "$mod_name $total_version Fabric"
    uploadFile = remapJar
    addGameVersion(curseforge_mc_version)
    addLoader('fabric')
    changelog = rootProject.file("changelog.md").text
    versionType = "RELEASE"

}

task publishFabric {
    group = "publishing"
    afterEvaluate {
        dependsOn(curseforge353890)
        dependsOn(publishModrinth)
    }
}